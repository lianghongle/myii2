<?php

// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.29 by WSRD Tencent.
// Generated from `qmf_protocal_define.jce'
// **********************************************************************


require_once('jce.php');

class LDmfClientIpInfo extends c_struct
{
    public $IpType;
    public $ClientPort;
    public $ClientIpv4;
    public $ClientIpv6;

    public function __clone()
    {
        $this->IpType = clone $this->IpType;
        $this->ClientPort = clone $this->ClientPort;
        $this->ClientIpv4 = clone $this->ClientIpv4;
        $this->ClientIpv6 = clone $this->ClientIpv6;
    }

    public function __construct()
    {
        $this->IpType = new  c_char;
        $this->ClientPort = new  c_short;
        $this->ClientIpv4 = new  c_int;
        $this->ClientIpv6 = new  c_vector (new c_char);
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.LDmfClientIpInfo";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->IpType->write($_out,0);
        $this->ClientPort->write($_out,1);
        $this->ClientIpv4->write($_out,2);
        $this->ClientIpv6->write($_out,3);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->IpType->read($_in , 0, true);
        $this->ClientPort->read($_in , 1, true);
        $this->ClientIpv4->read($_in , 2, true);
        $this->ClientIpv6->read($_in , 3, false);
        $this->_skip_struct($_in);
    }
}

class LDmfTokenInfo extends c_struct
{
    public $type;
    public $token;

    public function __clone()
    {
        $this->type = clone $this->type;
        $this->token = clone $this->token;
    }

    public function __construct()
    {
        $this->type = new  c_int;
        $this->token = new  c_vector (new c_char);
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.LDmfTokenInfo";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->type->write($_out,0);
        $this->token->write($_out,1);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->type->read($_in , 0, true);
        $this->token->read($_in , 1, true);
        $this->_skip_struct($_in);
    }
}

class LDmfAccInfo extends c_struct
{
    public $AccId;
    public $AccIp;
    public $AccPort;
    public $AccFlag;

    public function __clone()
    {
        $this->AccId = clone $this->AccId;
        $this->AccIp = clone $this->AccIp;
        $this->AccPort = clone $this->AccPort;
        $this->AccFlag = clone $this->AccFlag;
    }

    public function __construct()
    {
        $this->AccId = new  c_int64;
        $this->AccIp = new  c_int;
        $this->AccPort = new  c_short;
        $this->AccFlag = new  c_char;
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.LDmfAccInfo";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->AccId->write($_out,0);
        $this->AccIp->write($_out,1);
        $this->AccPort->write($_out,2);
        $this->AccFlag->write($_out,3);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->AccId->read($_in , 0, true);
        $this->AccIp->read($_in , 1, true);
        $this->AccPort->read($_in , 2, true);
        $this->AccFlag->read($_in , 3, false);
        $this->_skip_struct($_in);
    }
}

class LDmfBusiControl extends c_struct
{
    public $compFlag;
    public $lenBeforeComp;
    public $rspCompFlag;

    public function __clone()
    {
        $this->compFlag = clone $this->compFlag;
        $this->lenBeforeComp = clone $this->lenBeforeComp;
        $this->rspCompFlag = clone $this->rspCompFlag;
    }

    public function __construct()
    {
        $this->compFlag = new  c_int;
        $this->lenBeforeComp = new  c_int64;
        $this->rspCompFlag = new  c_int;
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.LDmfBusiControl";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->compFlag->write($_out,0);
        $this->lenBeforeComp->write($_out,1);
        $this->rspCompFlag->write($_out,2);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->compFlag->read($_in , 0, true);
        $this->lenBeforeComp->read($_in , 1, true);
        $this->rspCompFlag->read($_in , 2, true);
        $this->_skip_struct($_in);
    }
}

class mobile_get_config_req extends c_struct
{
    public $appid;
    public $scene;
    public $cookies;

    public function __clone()
    {
        $this->appid = clone $this->appid;
        $this->scene = clone $this->scene;
        $this->cookies = clone $this->cookies;
    }

    public function __construct()
    {
        $this->appid = new  c_int;
        $this->scene = new  c_int;
        $this->cookies = new  c_string;
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.mobile_get_config_req";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->appid->write($_out,0);
        $this->scene->write($_out,1);
        $this->cookies->write($_out,2);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->appid->read($_in , 0, false);
        $this->scene->read($_in , 1, false);
        $this->cookies->read($_in , 2, false);
        $this->_skip_struct($_in);
    }
}

class mobile_get_config_rsp extends c_struct
{
    public $config;
    public $cookies;

    public function __clone()
    {
        $this->config = clone $this->config;
        $this->cookies = clone $this->cookies;
    }

    public function __construct()
    {
        $this->config = new  c_map (new c_string,new c_vector (new c_char));
        $this->cookies = new  c_string;
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.mobile_get_config_rsp";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->config->write($_out,0);
        $this->cookies->write($_out,1);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->config->read($_in , 0, false);
        $this->cookies->read($_in , 1, false);
        $this->_skip_struct($_in);
    }
}

class LDmfUpstream extends c_struct
{
    public $Seq;
    public $Appid;
    public $Uin;
    public $ServiceCmd;
    public $deviceType;
    public $Token;
    public $IpInfo;
    public $BusiBuff;
    public $dev_id;

    public function __clone()
    {
        $this->Seq = clone $this->Seq;
        $this->Appid = clone $this->Appid;
        $this->Uin = clone $this->Uin;
        $this->ServiceCmd = clone $this->ServiceCmd;
        $this->deviceType = clone $this->deviceType;
        $this->Token = clone $this->Token;
        $this->IpInfo = clone $this->IpInfo;
        $this->BusiBuff = clone $this->BusiBuff;
        $this->dev_id = clone $this->dev_id;
    }

    public function __construct()
    {
        $this->Seq = new  c_int;
        $this->Appid = new  c_int;
        $this->Uin = new  c_int64;
        $this->ServiceCmd = new  c_string;
        $this->deviceType = new  c_int;
        $this->Token = new  LDmfTokenInfo;
        $this->IpInfo = new  LDmfClientIpInfo;
        $this->BusiBuff = new  c_vector (new c_char);
        $this->dev_id = new  c_int64;
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.LDmfUpstream";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->Seq->write($_out,0);
        $this->Appid->write($_out,1);
        $this->Uin->write($_out,2);
        $this->ServiceCmd->write($_out,3);
        $this->deviceType->write($_out,4);
        $this->Token->write($_out,5);
        $this->IpInfo->write($_out,6);
        $this->BusiBuff->write($_out,7);
        $this->dev_id->write($_out,8);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->Seq->read($_in , 0, true);
        $this->Appid->read($_in , 1, true);
        $this->Uin->read($_in , 2, true);
        $this->ServiceCmd->read($_in , 3, true);
        $this->deviceType->read($_in , 4, true);
        $this->Token->read($_in , 5, true);
        $this->IpInfo->read($_in , 6, true);
        $this->BusiBuff->read($_in , 7, true);
        $this->dev_id->read($_in , 8, true);
        $this->_skip_struct($_in);
    }
}

class LDmfDownstream extends c_struct
{
    public $Seq;
    public $Uin;
    public $Appid;
    public $deviceType;
    public $WnsCode;
    public $BizCode;
    public $ServiceCmd;
    public $BusiBuff;
    public $flag;
    public $dev_id;

    public function __clone()
    {
        $this->Seq = clone $this->Seq;
        $this->Uin = clone $this->Uin;
        $this->Appid = clone $this->Appid;
        $this->deviceType = clone $this->deviceType;
        $this->WnsCode = clone $this->WnsCode;
        $this->BizCode = clone $this->BizCode;
        $this->ServiceCmd = clone $this->ServiceCmd;
        $this->BusiBuff = clone $this->BusiBuff;
        $this->flag = clone $this->flag;
        $this->dev_id = clone $this->dev_id;
    }

    public function __construct()
    {
        $this->Seq = new  c_int;
        $this->Uin = new  c_int64;
        $this->Appid = new  c_int;
        $this->deviceType = new  c_int;
        $this->WnsCode = new  c_short;
        $this->BizCode = new  c_short;
        $this->ServiceCmd = new  c_string;
        $this->BusiBuff = new  c_vector (new c_char);
        $this->flag = new  c_char;
        $this->dev_id = new  c_int64;
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.LDmfDownstream";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->Seq->write($_out,0);
        $this->Uin->write($_out,1);
        $this->Appid->write($_out,2);
        $this->deviceType->write($_out,3);
        $this->WnsCode->write($_out,4);
        $this->BizCode->write($_out,5);
        $this->ServiceCmd->write($_out,6);
        $this->BusiBuff->write($_out,7);
        $this->flag->write($_out,8);
        $this->dev_id->write($_out,9);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->Seq->read($_in , 0, true);
        $this->Uin->read($_in , 1, true);
        $this->Appid->read($_in , 2, true);
        $this->deviceType->read($_in , 3, true);
        $this->WnsCode->read($_in , 4, true);
        $this->BizCode->read($_in , 5, true);
        $this->ServiceCmd->read($_in , 6, true);
        $this->BusiBuff->read($_in , 7, true);
        $this->flag->read($_in , 8, false);
        $this->dev_id->read($_in , 9, true);
        $this->_skip_struct($_in);
    }
}

class LDmfPushReq extends c_struct
{
    public $SeqNo;
    public $Uin;
    public $Appid;
    public $ServiceCmd;
    public $flag;
    public $Time;
    public $msg_receiver;
    public $Data;
    public $DeviceToken;
    public $deviceType;
    public $notification_msg;

    public function __clone()
    {
        $this->SeqNo = clone $this->SeqNo;
        $this->Uin = clone $this->Uin;
        $this->Appid = clone $this->Appid;
        $this->ServiceCmd = clone $this->ServiceCmd;
        $this->flag = clone $this->flag;
        $this->Time = clone $this->Time;
        $this->msg_receiver = clone $this->msg_receiver;
        $this->Data = clone $this->Data;
        $this->DeviceToken = clone $this->DeviceToken;
        $this->deviceType = clone $this->deviceType;
        $this->notification_msg = clone $this->notification_msg;
    }

    public function __construct()
    {
        $this->SeqNo = new  c_int;
        $this->Uin = new  c_int64;
        $this->Appid = new  c_int;
        $this->ServiceCmd = new  c_string;
        $this->flag = new  c_char;
        $this->Time = new  c_int64;
        $this->msg_receiver = new  c_vector (new c_int64);
        $this->Data = new  c_vector (new c_char);
        $this->DeviceToken = new  c_string;
        $this->deviceType = new  c_int;
        $this->notification_msg = new  c_string;
    }

    public function get_class_name()
    {
        return "LDMF_PROTOCAL.LDmfPushReq";
    }

    public function write(&$_out,$tag)
    {
        jce_header::_pack_header($_out,'c_struct_begin',$tag);
        $this->SeqNo->write($_out,0);
        $this->Uin->write($_out,1);
        $this->Appid->write($_out,2);
        $this->ServiceCmd->write($_out,3);
        $this->flag->write($_out,4);
        $this->Time->write($_out,5);
        $this->msg_receiver->write($_out,6);
        $this->Data->write($_out,7);
        $this->DeviceToken->write($_out,8);
        $this->deviceType->write($_out,9);
        $this->notification_msg->write($_out,10);
        jce_header::_pack_header($_out,'c_struct_end',0);
    }
    public function read(&$_in,$tag,$isRequire = true)
    {
        jce_header::_check_struct($_in,$type,$tag,$isRequire);
        jce_header::_unpack_header($_in,$type,$this_tag);
        $this->SeqNo->read($_in , 0, true);
        $this->Uin->read($_in , 1, true);
        $this->Appid->read($_in , 2, true);
        $this->ServiceCmd->read($_in , 3, true);
        $this->flag->read($_in , 4, false);
        $this->Time->read($_in , 5, true);
        $this->msg_receiver->read($_in , 6, true);
        $this->Data->read($_in , 7, true);
        $this->DeviceToken->read($_in , 8, false);
        $this->deviceType->read($_in , 9, false);
        $this->notification_msg->read($_in , 10, false);
        $this->_skip_struct($_in);
    }
}


?>
